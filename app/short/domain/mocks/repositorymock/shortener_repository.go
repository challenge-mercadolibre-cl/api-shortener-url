// Code generated by mockery v2.10.4. DO NOT EDIT.

package repositorymock

import (
	context "context"

	aggregations "github.com/challenge-mercadolibre-cl/api-shortener-url/app/short/domain/aggregations"

	identifier "github.com/challenge-mercadolibre-cl/api-shortener-url/app/short/domain/identifier"

	mock "github.com/stretchr/testify/mock"

	vo "github.com/challenge-mercadolibre-cl/api-shortener-url/app/short/domain/vo"
)

// ShortenerRepository is an autogenerated mock type for the ShortenerRepository type
type ShortenerRepository struct {
	mock.Mock
}

// Edit provides a mock function with given fields: ctx, url, urlId
func (_m *ShortenerRepository) Edit(ctx context.Context, url aggregations.Url, urlId identifier.UrlId) error {
	ret := _m.Called(ctx, url, urlId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, aggregations.Url, identifier.UrlId) error); ok {
		r0 = rf(ctx, url, urlId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, urlId
func (_m *ShortenerRepository) Get(ctx context.Context, urlId identifier.UrlId) (vo.UrlLink, error) {
	ret := _m.Called(ctx, urlId)

	var r0 vo.UrlLink
	if rf, ok := ret.Get(0).(func(context.Context, identifier.UrlId) vo.UrlLink); ok {
		r0 = rf(ctx, urlId)
	} else {
		r0 = ret.Get(0).(vo.UrlLink)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, identifier.UrlId) error); ok {
		r1 = rf(ctx, urlId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, url
func (_m *ShortenerRepository) Save(ctx context.Context, url aggregations.Url) error {
	ret := _m.Called(ctx, url)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, aggregations.Url) error); ok {
		r0 = rf(ctx, url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
